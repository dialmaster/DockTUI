name: Python Checks

on:
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      run: |
        pip install poetry==1.8.3

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies (without cache)
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev

    - name: Install dependencies (with cache)
      if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
      run: poetry install --no-interaction --no-root --with dev

    - name: Run autoflake unused imports check
      run: |
        poetry run autoflake --check --remove-all-unused-imports --remove-unused-variables --recursive DockTUI/

    - name: Run isort import checker
      run: |
        poetry run isort --check-only DockTUI/

    - name: Run Black formatter check
      run: |
        poetry run black --check DockTUI/

    - name: Run pytest with coverage
      run: |
        poetry run pytest -v --cov=DockTUI --cov-report=xml --cov-report=term-missing --cov-report=json

    - name: Generate coverage report
      if: always()
      run: |
        echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        poetry run coverage report >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Per-File Coverage" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        poetry run coverage report --skip-covered --sort=cover >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

        # Generate coverage report for PR comment
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "COVERAGE_REPORT<<EOF" >> $GITHUB_ENV
          echo "## Detailed Coverage Report" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "### Summary" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          poetry run coverage report | head -n 10 >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "### Files with Low Coverage" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          poetry run coverage report --skip-covered --sort=cover | head -n 30 >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "*View full report in the [workflow summary](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi

    - name: Post detailed coverage comment
      if: github.event_name == 'pull_request' && env.COVERAGE_REPORT != ''
      uses: actions/github-script@v7
      with:
        github-token: ${{ github.token }}
        script: |
          const coverageReport = process.env.COVERAGE_REPORT;

          // Find existing coverage comment
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('## Detailed Coverage Report')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageReport
            });
          }

    - name: Coverage comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 60
        VERBOSE: true
        MAX_FILES_IN_COMMENT: 50
        ANNOTATE_MISSING_LINES: true

    - name: Check for Python syntax errors or undefined names
      run: |
        poetry run python -m py_compile DockTUI/**/*.py